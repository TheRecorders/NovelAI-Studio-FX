name: Java CI with Maven and Release

on:
  push:
    branches: [ "dev-master" ]
  pull_request:
    branches: [ "dev-master" ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [21]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven

      - name: Get version from pom.xml
        run: |
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)" >> $GITHUB_ENV
        shell: bash

      - name: Build with Maven
        run: mvn clean install -B -V

      - name: Display Java version
        run: java -version

      - name: Display Maven version
        run: mvn --version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: NovelAI-Studio-FX-${{ matrix.os }}-${{ env.PROJECT_VERSION }}
          path: target/NovelAI-Studio-FX-*.jar

      - name: Run tests
        run: mvn test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.java }}-${{ env.PROJECT_VERSION }}
          path: target/surefire-reports

      - name: Upload Maven logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: maven-logs-${{ matrix.os }}-${{ matrix.java }}-${{ env.PROJECT_VERSION }}
          path: ~/.m2/repository/.m2.log

      - name: Create Release
        if: success() && matrix.os == 'ubuntu-latest'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: success() && matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/NovelAI-Studio-FX-${{ env.PROJECT_VERSION }}.jar
          asset_name: NovelAI-Studio-FX-${{ env.PROJECT_VERSION }}.jar
          asset_content_type: application/java-archive