name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [21]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven

      - name: Set version (Linux)
        if: runner.os == 'Linux'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          VERSION=$(git describe --tags --always --dirty | sed 's/^v//; s/-/./')
          CLEAN_VERSION=$(echo $VERSION | sed 's/[^0-9.]//g')
          if [[ ! $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            CLEAN_VERSION="0.1.0-SNAPSHOT"
          fi
          echo "PROJECT_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "Set version to $CLEAN_VERSION"
        shell: bash

      - name: Set version (Windows)
        if: runner.os == 'Windows'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          $VERSION = (git describe --tags --always --dirty) -replace '^v','' -replace '-','.'
          $CLEAN_VERSION = $VERSION -replace '[^0-9.]',''
          if ($CLEAN_VERSION -notmatch '^\d+\.\d+\.\d+$') {
            $CLEAN_VERSION = "0.1.0-SNAPSHOT"
          }
          echo "PROJECT_VERSION=$CLEAN_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Set version to $CLEAN_VERSION"
        shell: pwsh

      - name: Build with Maven
        run: mvn clean install -B -V

      - name: Display Java version
        run: java -version

      - name: Display Maven version
        run: mvn --version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: NovelAI-Studio-FX-${{ matrix.os }}-${{ env.PROJECT_VERSION }}
          path: target/NovelAI-Studio-FX-*.jar

      - name: Run tests
        run: mvn test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.java }}-${{ env.PROJECT_VERSION }}
          path: target/surefire-reports

      - name: Upload Maven logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: maven-logs-${{ matrix.os }}-${{ matrix.java }}-${{ env.PROJECT_VERSION }}
          path: ~/.m2/repository/.m2.log

      - name: Create and push tag
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0)
          LAST_TAG=${LAST_TAG:-"v0.0.0"}
          NEW_TAG=$(echo $LAST_TAG | awk -F. '{ printf "v%d.%d.%d", $1, $2, $3+1 }')
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.NEW_TAG }}
          release_name: Release ${{ steps.create_tag.outputs.NEW_TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/NovelAI-Studio-FX-*.jar
          asset_name: NovelAI-Studio-FX-${{ matrix.os }}-${{ env.PROJECT_VERSION }}.jar
          asset_content_type: application/java-archive
